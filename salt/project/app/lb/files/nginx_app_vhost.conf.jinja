{%- set webhead_compound_string = "G@node_type:util and G@datacenter:" +  grains['datacenter'] + " and G@env:" + grains['env'] -%}
## Our uWSGI Cluster to the uWSGI Servers.
upstream uwsgicluster {
  least_conn;
{%- for webhead in salt['publish.publish']( webhead_compound_string , 'network.ip_addrs', 'eth0', 'compound').values() %}
  server {{ webhead.0 }}:9999;
{%- endfor %}
}

## This server block is for monitor the nginx_stub_status.
server {
  listen 127.0.0.1:80;
  server_name localhost;

  location /nginx_stub_status {
    stub_status on;
    allow 127.0.0.1;
    deny all;
  }
}

## Redirect non-www HTTP traffic over to NON-WWW HTTPS.
server {
  listen 80;
  server_name {{ pillar['domain_name'] }};

  return 301 https://{{ pillar['domain_name'] }}$request_uri;
}

## HTTPS
server {
  listen 443 ssl spdy;
  server_name {{ pillar['domain_name'] }};

  spdy_headers_comp 1;

  ## Access logs to be sucked up by LogStash.
  access_log /var/log/nginx/{{ pillar['domain_name'] }}-access.json json;

  server_name {{ pillar['domain_name'] }};

  root {{ pillar['document_root'] }}/{{ pillar['project_name'] }};

  ssl_certificate /etc/nginx/ssl/ssl.crt;
  ssl_certificate_key /etc/nginx/ssl/ssl.key;

  ## SSL Tuning; http://techsamurais.com/?p=1384
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  ## Our 502/503 error page.
  error_page 502 503 =503 /503.html;

  location /503.html {
    root /etc/nginx/error_pages/;
  }

  location / {
    root /etc/nginx/;
    try_files /maintenance.html $uri @proxy_to_app;
  }

  location @proxy_to_app {
    uwsgi_pass uwsgicluster;
    include uwsgi_params;
  }

}